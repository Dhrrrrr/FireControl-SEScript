//NOTE: There are no comments due to letter limits in programmable blocks

        List<TargetGrid> targettedGridList = new List<TargetGrid>();

        IMyCameraBlock mainCamera;
        IMyCockpit cockpit;

        IMyTextPanel textPanel;

        Vector3D currentTarget = Vector3D.Zero;
        Vector3D currentVelocity = Vector3D.Zero;


        public Program()
        {
            mainCamera = GridTerminalSystem.GetBlockWithName("DAGGER Targetting Cam") as IMyCameraBlock;
            cockpit = GridTerminalSystem.GetBlockWithName("Control Seat") as IMyCockpit;

            if (mainCamera == null || cockpit == null)
            {
                Echo("Missing Essential Blocks");
                return;
            }

            textPanel = GridTerminalSystem.GetBlockWithName("DAGGER Text Panel") as IMyTextPanel;


            Runtime.UpdateFrequency = UpdateFrequency.Update1;
        }

        public void Main(string argument, UpdateType updateSource)
        {
            if (textPanel != null)
            {
                WriteToTextPanel();
            }
        }

        public void WriteToTextPanel()
        {
            string mainText = "";

            mainText += "Target Position: " + currentTarget + Environment.NewLine;
            mainText += "Target Velocity: " + currentVelocity + Environment.NewLine;

            textPanel.FontColor = Color.Yellow;

            textPanel.WriteText(mainText); 
        }

        public class TargetGrid
        {
            public Vector3D Position { get { return _position; } }
            public Vector3D Velocity { get { return _velocity; } }
            public Vector3D Acceleration { get { return _acceleration; } }

            private Vector3D _position;
            private Vector3D _velocity;
            private Vector3D _acceleration;

            public TargetGrid(MyDetectedEntityInfo raycastInfo)
            {
                _position = raycastInfo.HitPosition.Value;
                _position = raycastInfo.Velocity;
                _acceleration = Vector3D.Zero;
            }

            public void RecalculatePosition(MyDetectedEntityInfo raycastInfo)
            {
                _acceleration = _velocity - raycastInfo.Velocity;
                _velocity = raycastInfo.Velocity;
                _position = raycastInfo.HitPosition.Value;
            }

            public Vector3D CalculateNewPosition()
            {
                double multiplier = 1 / 60;
                Vector3D finalPosition;

                finalPosition = _position + ((_velocity + (_acceleration * multiplier)) * multiplier);

                return finalPosition;
            }
        }
