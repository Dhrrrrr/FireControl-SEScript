        // Config

        // Main
        static bool trackGrids = true;
        static double maxRange = 15000;
        static double maxTrackingRange = 5000;

        float extraRange = 1.1f;

        const bool useAcceleration = false;

        const bool useHitPositionGrid = true;
        const bool useHitPositionTracking = false;

        // Block Names
        const string camName = "Main Targetting Cam";
        const string cockpitName = "Control Seat";
        const string textpanelName = "GFS Text Panel";

        const string cameraGroupName = "Targetting Cams";

        // Current targetted grid -- To be overhauled
        TargetGrid targettedGrid;

        // Mandatory Block variables
        IMyCameraBlock mainCamera;
        IMyCockpit cockpit;

        // Optional block
        IMyTextPanel textPanel;
        List<IMyCameraBlock> extraCamList = new List<IMyCameraBlock>();

        // Target info
        Vector3D currentTarget = Vector3D.Zero;
        Vector3D currentVelocity = Vector3D.Zero;

        // Extra variables
        bool activelyTracking = false;
        bool lostLock = false;

        // Used for timing multiple cams
        int ticksSinceLastCast = 0;

        // time for single tick
        const double singleTickMutlipler = 1 / 60;

        const string IDENTIFIERCODE = "GFS";

        public Program()
        {
            // Pull mandatory blocks
            mainCamera = GridTerminalSystem.GetBlockWithName(camName) as IMyCameraBlock;
            cockpit = GridTerminalSystem.GetBlockWithName(cockpitName) as IMyCockpit;

            // Check for errors
            if (mainCamera == null || cockpit == null)
            {
                Echo("Missing Essential Blocks");
                return;
            }

            // Get optionals if they exists
            textPanel = GridTerminalSystem.GetBlockWithName(textpanelName) as IMyTextPanel;

            IMyBlockGroup camGroup = GridTerminalSystem.GetBlockGroupWithName(cameraGroupName);

            if (camGroup != null)
            {
                camGroup.GetBlocksOfType(extraCamList);

            }

            extraCamList.Add(mainCamera);

            // Enable raycasting
            foreach (var camera in extraCamList)
            {
                camera.EnableRaycast = true;
            }

            Runtime.UpdateFrequency = UpdateFrequency.Update1;
        }

        public void Main(string argument, UpdateType updateSource)
        {
            // Check for incoming arguments
            switch (argument)
            {
                case "Clear":
                    ClearAllInfo();
                    break;

                case "Cast":
                    CreateMainRaycast();
                    break;

                case "Track":
                    activelyTracking = !activelyTracking;
                    break;

                default:
                    CheckArgInput(argument);
                    break;
            }

            // Check if active tracking is on, and attempt to track a grid if one exists
            if (activelyTracking)
            {
                CreateTrackingRaycast();

                // Update grid info
                if (targettedGrid != null)
                {
                    targettedGrid.CalculateVelocity();

                    if (useHitPositionGrid)
                    {
                        currentTarget = targettedGrid.FinalPos;

                    }
                    else
                    {
                        currentTarget = targettedGrid.Position;

                    }

                    currentVelocity = targettedGrid.Velocity;
                }
            } // Purge targetted grid if still existing
            else if (targettedGrid != null)
            {
                targettedGrid = null;
            }

            // Write to textpanel if one exists
            if (textPanel != null)
            {
                WriteToTextPanel();
            }

            // Echo the tracking variable so the user can quickly tell if tracking is enabled
            Echo(activelyTracking.ToString());

            // Print info to custom data for other objects to use
            Me.CustomData = IDENTIFIERCODE + "|" + currentTarget + "," + currentVelocity;
        }

        /// <summary>
        /// Clears main variables
        /// </summary>
        public void ClearAllInfo()
        {
            currentTarget = Vector3D.Zero;
            currentVelocity = Vector3D.Zero;
            targettedGrid = null;
        }

        /// <summary>
        /// Create a starting raycast, either for single or first of a track
        /// </summary>
        public void CreateMainRaycast()
        {
            // Create raycast in straight direction
            MyDetectedEntityInfo rayInfo = mainCamera.Raycast(maxRange);
            
            // Check if there was a hit
            if (!rayInfo.IsEmpty())
            {

                // If grid tracking is enabled
                if (activelyTracking)
                {
                    //If enabled and the target hit is a grid, then create new target grid
                    if (rayInfo.Type == MyDetectedEntityType.LargeGrid || rayInfo.Type == MyDetectedEntityType.SmallGrid)
                    {
                        targettedGrid = new TargetGrid(rayInfo, useAcceleration, useHitPositionGrid, useHitPositionTracking);
                        currentTarget = targettedGrid.Position;
                        currentVelocity = targettedGrid.Velocity;

                        // End the method before inserting standard info
                        return;
                    }
                }

                // Standard hit position location
                currentTarget = rayInfo.HitPosition.Value;
                currentVelocity = rayInfo.Velocity;
                targettedGrid = null;
            }
        }

        /// <summary>
        /// Creates a raycast that attempts to use the location of a targetted grid if one exists
        /// </summary>
        public void CreateTrackingRaycast()
        {
            // Check existance of grid
            if (targettedGrid != null)
            {
                // Get distance from target
                Vector3D direction = (targettedGrid.Position - mainCamera.WorldMatrix.Translation) * extraRange;
                double distance = direction.Length() * extraRange;
                float rayCone = mainCamera.RaycastConeLimit;

                // if goes over max distance then break
                if (distance > maxTrackingRange)
                {
                    return;
                }

                // Check if cam list exists
                if (extraCamList.Count > 1)
                {
                    // Count the amount of cameras available to cast the location, and save them for use
                    int availableCamCount = 0;
                    List<IMyCameraBlock> availableCams = new List<IMyCameraBlock>();

                    foreach (var camera in extraCamList)
                    {
                        if (CheckCamDetectionAbility(camera, direction.Normalized(), rayCone))
                        {
                            availableCamCount += 1;
                            availableCams.Add(camera);
                        }
                    }

                    // Get ticks till next targetting
                    float metresPerTick = mainCamera.RaycastTimeMultiplier * (1000 / 60) * availableCamCount;
                    int ticksTillCast = (int)Math.Ceiling(distance / metresPerTick);

                    // Check if a cast should be run, if not add to next tick
                    if (ticksSinceLastCast >= ticksTillCast)
                    {
                        bool sentRay = false; 

                        // Find an available camera to cast with and send point
                        foreach (var camera in availableCams)
                        {
                            if (camera.CanScan(distance))
                            {
                                RunTargettingCast(camera, targettedGrid.Position + direction);
                                sentRay = true;
                                break;
                            }
                        }

                        if (sentRay)
                        {
                            ticksSinceLastCast = 0;
                            return;
                        }
                    }

                    // Add a tick till cast if no ray was sent
                    ticksSinceLastCast += 1;                
                }
                else
                {
                    // Use extra range in case target is out of range, and only send out the raycast if there is avaiable length
                    if (mainCamera.CanScan(distance))
                    {
                        RunTargettingCast(mainCamera, targettedGrid.Position + direction);
                    }
                }
            }
        }

        /// <summary>
        /// Runs a targetting cast
        /// </summary>
        /// <param name="cam">Camera to cast with</param>
        /// <param name="point">Point of target</param>
        public void RunTargettingCast(IMyCameraBlock cam, Vector3D point)
        {
            MyDetectedEntityInfo rayInfo = cam.Raycast(point);

            // If the raycast hit the current targetted grid, recalculate its position with new info, and return;
            if (!rayInfo.IsEmpty())
            {
                if (targettedGrid.id == rayInfo.EntityId)
                {
                    targettedGrid.RecalculatePosition(rayInfo);

                    return;
                }
            }

            // Call lost lock if the grid wasn't relocated
            lostLock = true;
            targettedGrid = null;
        }

        /// <summary>
        /// Checks if the camera is able to cast a ray to the point
        /// </summary>
        /// <param name="cam">Camera to check</param>
        /// <param name="direction">Direction to object</param>
        /// <returns></returns>
        public bool CheckCamDetectionAbility(IMyCameraBlock cam, Vector3D direction, float maxAngle)
        {
            // Get direction vectors
            Vector3D forward = cam.WorldMatrix.Forward;
            Vector3D left = cam.WorldMatrix.Left;
            Vector3D down = cam.WorldMatrix.Down;

            // Project to plane and get angles
            Vector3D xz = ProjectVectorToPlane(forward, left, direction);
            Vector3D xy = ProjectVectorToPlane(forward, down, direction);

            float angleXZ = CalcAngleBetweenVec(forward, xz);
            float angleXY = CalcAngleBetweenVec(forward, xy);

            // Check and return
            if (angleXZ < maxAngle && angleXY < maxAngle)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Get raw input from argument and check if its important info such as GPS or Vector3 and parse it
        /// </summary>
        /// <param name="input">Argument input</param>
        public void CheckArgInput(string input)
        {
            string[] splitString = input.Split(':');

            try
            {
                if (splitString.Length == 4)
                {
                    string[] secondarySplit1 = splitString[1].Split(' ');
                    string[] secondarySplit2 = splitString[2].Split(' ');
                    string[] secondarySplit3 = splitString[3].Split(' ');

                    double x = Convert.ToDouble(secondarySplit1[0]);
                    double y = Convert.ToDouble(secondarySplit2[0]);
                    double z = Convert.ToDouble(secondarySplit3[0]);

                    activelyTracking = false;

                    currentTarget = new Vector3D(x, y, z);
                }
                else if (splitString.Length == 7)
                {
                    double x = Convert.ToDouble(splitString[2]);
                    double y = Convert.ToDouble(splitString[3]);
                    double z = Convert.ToDouble(splitString[4]);

                    activelyTracking = false;

                    currentTarget = new Vector3D(x, y, z);
                }
            }
            catch (Exception)
            {

            }



        }

        /// <summary>
        /// Write relevant info into text panel with styling
        /// </summary>
        public void WriteToTextPanel()
        {
            string mainText = "";

            mainText += "Target Position: " + currentTarget + Environment.NewLine;
            mainText += "Target Velocity: " + currentVelocity + Environment.NewLine;
            mainText += "Tracking Enabled: " + activelyTracking + Environment.NewLine + Environment.NewLine;

            if(targettedGrid != null)
            {
                mainText += "GRID TARGETTED" + Environment.NewLine;
                mainText += "Relationship Status: " + targettedGrid.FriendlyStatus + Environment.NewLine;
                mainText += "Name: " + targettedGrid.Name;
            }

            textPanel.FontColor = Color.Yellow;

            textPanel.WriteText(mainText); 
        }

        /// <summary>
        /// Calculate the difference in degrees between two vectors
        /// </summary>
        /// <param name="a">First direction vector</param>
        /// <param name="b">Second direction vector</param>
        /// <returns></returns>
        public float CalcAngleBetweenVec(Vector3D a, Vector3D b)
        {
            return (float)MathHelper.ToDegrees(Math.Acos(MathHelper.Clamp(a.Dot(b) / Math.Sqrt(a.LengthSquared() * b.LengthSquared()), -1, 1)));
        }

        /// <summary>
        /// Projects a 3D vector onto a 2D vector plane/circle using two crossed vectors as its guide
        /// </summary>
        /// <param name="x">First cross vector</param>
        /// <param name="y">Second cross vector</param>
        /// <param name="projectedVector">Vector being projected onto plane</param>
        /// <returns></returns>
        public Vector3D ProjectVectorToPlane(Vector3D x, Vector3D y, Vector3D projectedVector)
        {
            Vector3D xVec = Vector3D.ProjectOnVector(ref projectedVector, ref x);
            Vector3D yVec = Vector3D.ProjectOnVector(ref projectedVector, ref y);

            return xVec + yVec;
        }

        /// <summary>
        /// Class for a target object grid, used for tracking targets
        /// </summary>
        public class TargetGrid
        {
            // Pull vars
            public Vector3D Position { get { return _position; } set { _position = value; } }
            public Vector3D Velocity { get { return _velocity; } set { _velocity = value; } }
            public Vector3D Acceleration { get { return _acceleration; } set { _acceleration = value; } }
            public Vector3D FinalPos { get { return finalPos; } }

            // Interals
            private Vector3D _position;
            private Vector3D _velocity;
            private Vector3D _acceleration;

            // Name of the grid, relationship status and id for checking
            public MyRelationsBetweenPlayerAndBlock FriendlyStatus;
            public string Name;
            public long id;

            // Optional variables for targetting
            private bool useAcceleration;
            private bool useHitpositionGrid;
            private bool useHitpositionTracking;

            // Used for locating a point relative to the grid
            private Vector3D relativeGridVector;
            private Vector3D finalPos;
            private Vector3D truePosAdd;


            /// <summary>
            /// Generate a new targetted grid
            /// </summary>
            /// <param name="raycastInfo">Raycast hit for the targetted grid to pull info from</param>
            public TargetGrid(MyDetectedEntityInfo raycastInfo, bool accelerationEnabled, bool hitpositionGridEnabled, bool hitpositionTrackingEnbaled)
            {
                // Decide position if hitposition is enabled or not
                if (hitpositionTrackingEnbaled)
                {
                    _position = raycastInfo.HitPosition.Value;

                }
                else
                {
                    _position = raycastInfo.Position;

                }

                // Saves relative grid position if enabled
                if (hitpositionGridEnabled)
                {
                    Vector3D dif = raycastInfo.HitPosition.Value - raycastInfo.Position;

                    Vector3D forward = raycastInfo.Orientation.Forward;
                    Vector3D left = raycastInfo.Orientation.Left;
                    Vector3D up = raycastInfo.Orientation.Up;

                    double x = Vector3D.ProjectOnVector(ref dif, ref forward).Length();
                    double y = Vector3D.ProjectOnVector(ref dif, ref up).Length();
                    double z = Vector3D.ProjectOnVector(ref dif, ref left).Length();

                    relativeGridVector = new Vector3D(x, y, z);
                    finalPos = raycastInfo.Position + dif;
                    truePosAdd = dif;
                }

                _velocity = raycastInfo.Velocity;
                _acceleration = Vector3D.Zero;

                Name = raycastInfo.Name;
                FriendlyStatus = raycastInfo.Relationship;
                id = raycastInfo.EntityId;

                useAcceleration = accelerationEnabled;
                useHitpositionGrid = hitpositionGridEnabled;
                useHitpositionTracking = hitpositionTrackingEnbaled;
            }

            /// <summary>
            /// Uses updated raycast info to update internal tracking
            /// </summary>
            /// <param name="raycastInfo">Ray info input</param>
            public void RecalculatePosition(MyDetectedEntityInfo raycastInfo)
            {
                // Only update acceleration if its enabled
                if (useAcceleration)
                {
                    _acceleration = _velocity - raycastInfo.Velocity;

                }

                _velocity = raycastInfo.Velocity;

                // Check what type of overwriting it is using
                if (useHitpositionTracking)
                {
                    _position = raycastInfo.HitPosition.Value;

                }
                else
                {
                    _position = raycastInfo.Position;

                }

                // Check if its using specific position, and if so track
                if (useHitpositionGrid)
                {
                    Vector3D forward = raycastInfo.Orientation.Forward * relativeGridVector.X;
                    Vector3D left = raycastInfo.Orientation.Left * relativeGridVector.Z;
                    Vector3D up = raycastInfo.Orientation.Up * relativeGridVector.Y;

                    truePosAdd = forward + left + up;
                    finalPos = raycastInfo.Position + truePosAdd;
                }
            }

            /// <summary>
            /// Calculates new position using velocity and acceleration, with tick amount
            /// </summary>
            public void CalculateVelocity()
            {
                double multiplier = 60;

                // Check if acceleration usage is on
                if (useAcceleration)
                {
                    _velocity += new Vector3D(_acceleration.X / multiplier, _acceleration.Y / multiplier, _acceleration.Z / multiplier);
                }

                _position += new Vector3D(_velocity.X / multiplier, _velocity.Y / multiplier, _velocity.Z / multiplier); ;

                if (useHitpositionGrid)
                {
                    finalPos = _position + truePosAdd;

                }
            }

            /// <summary>
            /// Generate string for grid target
            /// </summary>
            /// <returns></returns>
            public override string ToString()
            {
                return _position + "," + _velocity + "," + _acceleration;
            }
        }
